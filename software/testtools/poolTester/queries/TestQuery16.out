V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> V> 
Beginning file: lio.S ...

#----------------------------------------------------------
#  Setup (lio)
#----------------------------------------------------------


#----------------------------------------------------------
#  Normal Input (lio)
#----------------------------------------------------------



-------------------------------------------------------
-------------------------------------------------------
------  PART 1 A - Test LIO Print Functions
------
-------------------------------------------------------
-------------------------------------------------------

### 1) PrintCurrentAsPointer: PrintAValue (LIO_printf)
### char, double, float, int

a
b
c
d
     1.20
89000000000000001376304724927144494480312698220175256453251759870901759310880675955517741164653086277156105304578983756762804721369893727406680835865068713115666141064576678259271900422850952852078706463759448485330610236238306006755163255274343715507048787142496960945133885950106215541419347332801700560896.00
1234563231.11
     2.33
9999999562023526247432192.00
323432224.00
     2.33
11111111111.00
        2
        3
        4


### 2) PrintOf List (LIO_puts)

         344343
        122.333
       1234.560
              0
            101
        334.230


### 3A&B) PrintAAsString: Print string or user selector (LIO_printf)
###	A) handle block string

Hello There World
Hello There World

>>> Selector 'print12' Not Found <<<

>>> Selector 'print24' Not Found <<<


###	b) handle lstore string

Hello There World
Hello There World

>>> Selector 'print12' Not Found <<<

>>> Selector 'print12' Not Found <<<

>>> Selector 'print24' Not Found <<<

>>> Selector 'print24' Not Found <<<


### 4) PrintAASKSI (LIO_puts)

value
+
=


### 5) PrintAASPrimfn <> (LIO_printf)

<StringLessThan>

<StringLessThanOrEqual>

{| >= aString| aString asString <= super}

{| > aString| aString asString < super}

<StringEqual>

{| != aString| (aString = super) not}

<PrintString>

{| breakString: aString| aString breakOn: super}

{| cbreakString: aString| aString cbreakOn: super}

{| 
prefixSpannedIn: aString| 
aString prefixSpannedBy: super}

{| 
prefixNotSpannedIn: aString| 
aString prefixNotSpannedBy: super}

{| matchesString: aString| aString basicContains: super}

{| print: aFormat| aFormat printOf: super}

{| prefixWith: aString| aString concat: super}

<Create>

<DBUpdateAppendDump>

<AppendOutput>

{|asBlock|(
"[ " concat: ^self .concat: " ] ") evaluate}

{| 
asBlockIn: object| (
"[ " concat: ^self .concat: " ] ") evaluateIn: object}

{|asCSVRecords|
^self asFileContents translate: "," to: "	" .
asLines select: [count > 0].
send: [
    !quotes <- ^self breakOn: "\"" .numberElements; [
        quotes 
        do: [
            position mod: 2 .= 1 ifTrue: [print]
            ifFalse: [^self translate: "	" to: "," .print]; 
           ]; 
       ]divertOutput].
extendBy: [!fields <- ^self breakOn: "	"]}

{|asCells|
!delimiter <- "	ÿ"; 
^self asCellsOn: delimiter}

{| 
asCellsOn: delimiter| 
^self breakOn: newLine .
select: [count > 0].
select: [^self contains: "@@@" .not].
extendBy: [
    !cells <- ^self breakOn: ^my delimiter .
    select: [count > 0].
    select: [^self contains: "" .not]; 
   ].
select: [cells count > 0]}

{|asCurrency|
^global Named Currency uniformAt: ^self asString}

{|asFileContents|
!ovc <- "file:" concat: ^self .asOpenVisionChannel; 
!result <- ovc getString; 
ovc close; 
result}

{|asInteger|
^self asNumber asInteger}

{|asLines|
^self breakOn: newLine .
select: [count > 0]}

{|asNumber|
!d <- toDouble; 
!i <- d round; 
d = i ifTrue: [i]ifFalse: [d]}

{|asOpenVisionChannel|
^self __asOpenVisionChannel asPointerTo: ^global OpenVision Channel}

{|asOpenVisionChannelToVision|
^self asOpenVisionChannel consumeVisionPrompt}

{|asQuotedString|
"\"" concat: ^self .concat: "\""}

{|asRecords|
^self asFileContents asLines select: [count > 0]}

<ReturnCurrent>

<ReturnCurrent>

{|asUpperLowerWords|
!word <- ^self; 
!list <- ^global List new; [
    word count > 0]
whileTrue: [
    !boundary <- (
    word drop: 1 .
    prefixNotSpannedBy: "ABCDEFGHIJKLMNOPQRSTUVWXYZ" .+ 
    1) asInteger; 
    list , (word take: boundary .capitalize); 
    :word <- word drop: boundary; 
   ]; 
list}

{|asWords|
^self breakOn: 
" 	
" .select: [count > 0]}

{| 
at: n| 
n isNumber && n > 0 && n <= ^self count ifTrue: [^self drop: n - 1 .take: 1]
ifFalse: [""]}

{| 
at: n put: s| 
n isNumber ifTrue: [
    !prefix <- n <= 1 
    ifTrue: [0].elseIf: n > count 
    then: [count].
    else: [(n - 1) asInteger]; 
    ^self take: prefix .concat: s asString .concat: (^self drop: prefix)]
ifFalse: [^self]}

<StringConcat>

<StringMatch>

<StringDrop>

<StringFill>

<StringTake>

<StringBreak>

<EncodeStringAsDouble>

{|capitalize|
!firstChar <- ^self take: 1; 
!upper <- UpperCaseDictionary at: firstChar; 
upper isNA ifTrue: [:upper <- firstChar]; 
upper concat: (^self drop: 1)}

<StringCBreak>

{| 
center: aWidth| [
    !blanks <- ((aWidth - count) / 2) asInteger; 
    blanks > 0 ifTrue: [
        " " print: blanks; 
        ^self print: (aWidth - 2 * blanks); 
        " " print: blanks; 
       ]
    ifFalse: [^self print: aWidth]; 
   ]divertOutput}

{| 
centerNL: aWidth| 
^self center: aWidth .concat: newLine}

{| 
concat: string| 
string isString ifTrue: [^self basicConcat: string asString]
ifFalse: [^self basicConcat: string asString stripBoundingBlanks]}

{| contains: string| ^self basicContains: string asString}

<StringMatch>

{| 
containsSubstring: substring| 
^self findSubstringOrigin: substring .< ^self count}

{|convertToNumber|
!prefix <- ^self prefixNotSpannedBy: "0123456789.-+"; 
!string <- ^self drop: prefix; 
!suffix <- string reverse prefixNotSpannedBy: "0123456789.-+"; 
:string <- string drop: (-1 * suffix) asInteger; 
string contains: "\." .ifTrue: [string stripCommas asNumber asDouble]
ifFalse: [string stripCommas asNumber]}

<StringSize>

<DeleteFromDictionaryOf>

{| drop: n| ^self basicDrop: n asInteger}

{|evaluate|^self evaluateIn: ^global}

{| 
evaluateIn: anObject| 
^self evaluateWithCompilationErrorHandler: [| 
    :string :errorLine :errorCharacter| 
    "Error at line/character [" print; 
    errorLine print; "/" print; errorCharacter print; 
    "] of <" print; 
    string print; 
    ">" printNL; 
   ]
in: anObject}

<StringEvaluate>

{| fill: n| ^self basicFill: n asInteger}

<FilterOutput>

<PatternExtent>

<PatternOrigin>

{| 
findPatternSuffix: pattern| ((
^self 
findPatternOrigin: pattern) + (
^self findPatternExtent: pattern)) 
asInteger}

{| 
findSubstringExtent: substring| 
!substringOrigin <- ^self findSubstringOrigin: substring; 
substringOrigin < ^self count ifTrue: [substring count]
ifFalse: [0]}

<SubstringOrigin>

{| 
findSubstringSuffix: substring| 
!substringOrigin <- ^self findSubstringOrigin: substring; 
substringOrigin < ^self count ifTrue: [(substringOrigin + substring count) asInteger]
ifFalse: [^self count]}

<ToLStoreString>

{|formatForExcel|[
    ^self asCells 
    do: [cells 
        do: [^self stripBoundingBlanks = "NA" ifTrue: ["" print]
            ifFalse: [print]; 
            "	" print; 
           ]; 
        newLine print; 
       ]; 
   ]divertOutput}

{|formatForPRN|[
    ^self asCells 
    do: [cells 
        do: [!number <- ^self convertToNumber; 
            number isNumber ifTrue: [number print; " " print]
            ifFalse: [
                "\"" print; 
                ^self stripBoundingBlanks = "NA" ifTrue: [" " print]
                ifFalse: [print]; 
                "\"" print; " " print; 
               ]; 
           ]; 
        newLine print; 
       ]; 
   ]divertOutput}

{| 
from: pos for: count| 
!start <- pos max: 1; 
!end <- count > 0 ifTrue: [pos + count - 1]
ifFalse: [pos + count + 1]; 
start < end ifTrue: [^self from: start to: end]
ifFalse: [^self from: end to: start]}

{| 
from: pos1 to: pos2| 
!start <- pos1 max: 1; 
!end <- pos2 max: 1; 
!count <- (end - start) absoluteValue + 1; 
!drop <- start min: end .- 1; 
!result <- ^self drop: drop .take: count; 
start <= end ifTrue: [result]ifFalse: [result reverse]}

{|isBlank|
" " take: (^self count) .= ^self asSelf}

{| 
isBlankFor: n| 
^self take: n .= (" " take: n)}

{|isDefault|^self count = 0}

<LocateEntryInDictionaryOf>

<LocateOrAddEntryInDictionaryOf>

{|lowercase|
!firstChar <- ^self take: 1; 
!lower <- LowerCaseDictionary at: firstChar; 
lower isNA ifTrue: [:lower <- firstChar]; 
lower concat: (^self drop: 1)}

{|notifyAsComment|
"   ...  " print; 
print; 
newLine print; 
}

{|notifyAsError|
"   >>>   " print; 
print; 
"   <<<" print; 
newLine print; 
}

{|notifyAsWarning|
"   ==> WARNING:  " print; 
print; 
newLine print; 
}

{| 
orderUsingDictionary: dictionary| 
"." concat: super .locateOrAddInDictionaryOf: dictionary}

{| 
patternExtentIn: string| 
string findPatternExtent: super}

{| 
patternOriginIn: string| 
string findPatternOrigin: super}

<StringCSpan>

<StringSpan>

{|printPRN|
"\"" print; 
^self print; 
"\"" print; 
^self}

{| 
printPRN: aFormat| 
"\"" print; 
^self print: aFormat; 
"\"" print; 
^self}

<PutString>

<DBUpdateReplaceDump>

<StringReverse>

{| sprint: aFormat| aFormat sprintOf: super}

{| 
startingPositionOf: subString| 
!matches <- ^self startingPositionsOf: subString; 
matches isntNA ifTrue: [matches at: 1]}

{| 
startingPositionsOf: subString| 
!searchString <- ^self; 
searchString contains: subString .
ifTrue: [
    !firstChar <- subString take: 1; 
    !length <- subString count; 
    !entryPoints <- searchString breakOn: firstChar .
    runningTotal: [1 + ^self count].
    extendBy: [
        !startingPosition <- (runningTotal - 1) asInteger; 
        !matchString <- 
        ^my searchString drop: startingPosition .take: ^my length; 
       ]; 
    !matches <- entryPoints select: [matchString = ^my subString]; 
    matches send: [(startingPosition + 1) asInteger]]}

{|stripBoundingBlanks|
^self stripLeadingBlanks stripTrailingBlanks}

{| 
stripChar: char| [
    ^self breakOn: char .do: [print]]
divertOutput}

{|stripCommas|[
    ^self breakOn: "," .
    do: [print]]
divertOutput}

{|stripLeadingBlanks|
^self drop: (^self prefixSpannedBy: " ")}

{|stripTrailingBlanks|
^self reverse stripLeadingBlanks reverse}

<WriteOutput>

{| 
substringOriginIn: string| 
string findSubstringOrigin: super}

{| take: n| ^self basicTake: n asInteger}

<ToDouble>

{|toList|
!string <- ^self; 
^self count sequence0 
send: [^my string drop: ^self .take: 1]}

{|toLower|[
    ^self toList 
    do: [^self lowercase print]]
divertOutput}

{|toUpper|[
    ^self toList 
    do: [^self capitalize print]]
divertOutput}

{| 
translate: char to: string| [
    ^self breakOn: char .do: [print; ^my string print;]]
divertOutput drop: string count * -1}



### 6) PrintAAsBlockClosureInd  (LIO_broadcast)


>>> Selector 'ClassDescriptor' Not Found <<<

[|print|^self code print; ^self]
[|print|"      NA " print; ^self]
[|print|^self whatAmI print; ^self]
[|print|"      NA " print; ^self]
[|print|"aList" print; ^self]
<PrintDate>
[|print|^self code print; ^self]
<PrintString>
<PrintCurrentAsPointer>
<PrintString>

### 7) PrintDate (LIO_printf)

12/31/1983
2/21/1983
1/1/1980



###############################
###############################
###  Now test large prints
###############################
###############################

### 8
### elements longer than 256 - strings

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


### 9
### force it to realloc - doubles

          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200
          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200          12.200


End of file: lio.S


V> V> 